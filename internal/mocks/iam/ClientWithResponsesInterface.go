// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks_iam

import (
	context "context"
	io "io"

	iam "github.com/astronomer/terraform-provider-astro/internal/clients/iam"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AddTeamMembersWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMembersWithBodyWithResponse")
	}

	var r0 *iam.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.AddTeamMembersResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.AddTeamMembersResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTeamMembersWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithResponse(ctx context.Context, organizationId string, teamId string, body iam.AddTeamMembersRequest, reqEditors ...iam.RequestEditorFn) (*iam.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMembersWithResponse")
	}

	var r0 *iam.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.AddTeamMembersRequest, ...iam.RequestEditorFn) (*iam.AddTeamMembersResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.AddTeamMembersRequest, ...iam.RequestEditorFn) *iam.AddTeamMembersResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.AddTeamMembersRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.CreateApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiTokenWithBodyWithResponse")
	}

	var r0 *iam.CreateApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.CreateApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) *iam.CreateApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateApiTokenWithResponse(ctx context.Context, organizationId string, body iam.CreateApiTokenRequest, reqEditors ...iam.RequestEditorFn) (*iam.CreateApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiTokenWithResponse")
	}

	var r0 *iam.CreateApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateApiTokenRequest, ...iam.RequestEditorFn) (*iam.CreateApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateApiTokenRequest, ...iam.RequestEditorFn) *iam.CreateApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, iam.CreateApiTokenRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamWithBodyWithResponse")
	}

	var r0 *iam.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.CreateTeamResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) *iam.CreateTeamResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithResponse(ctx context.Context, organizationId string, body iam.CreateTeamRequest, reqEditors ...iam.RequestEditorFn) (*iam.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamWithResponse")
	}

	var r0 *iam.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateTeamRequest, ...iam.RequestEditorFn) (*iam.CreateTeamResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateTeamRequest, ...iam.RequestEditorFn) *iam.CreateTeamResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, iam.CreateTeamRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserInviteWithBodyWithResponse")
	}

	var r0 *iam.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.CreateUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) *iam.CreateUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithResponse(ctx context.Context, organizationId string, body iam.CreateUserInviteRequest, reqEditors ...iam.RequestEditorFn) (*iam.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserInviteWithResponse")
	}

	var r0 *iam.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateUserInviteRequest, ...iam.RequestEditorFn) (*iam.CreateUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, iam.CreateUserInviteRequest, ...iam.RequestEditorFn) *iam.CreateUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, iam.CreateUserInviteRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteApiTokenWithResponse(ctx context.Context, organizationId string, tokenId string, reqEditors ...iam.RequestEditorFn) (*iam.DeleteApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiTokenWithResponse")
	}

	var r0 *iam.DeleteApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.DeleteApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.DeleteApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...iam.RequestEditorFn) (*iam.DeleteTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamWithResponse")
	}

	var r0 *iam.DeleteTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.DeleteTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.DeleteTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserInviteWithResponse provides a mock function with given fields: ctx, organizationId, inviteId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteUserInviteWithResponse(ctx context.Context, organizationId string, inviteId string, reqEditors ...iam.RequestEditorFn) (*iam.DeleteUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, inviteId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserInviteWithResponse")
	}

	var r0 *iam.DeleteUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.DeleteUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, inviteId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.DeleteUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, inviteId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, inviteId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetApiTokenWithResponse(ctx context.Context, organizationId string, tokenId string, reqEditors ...iam.RequestEditorFn) (*iam.GetApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiTokenWithResponse")
	}

	var r0 *iam.GetApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.GetApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.GetApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) GetTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...iam.RequestEditorFn) (*iam.GetTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamWithResponse")
	}

	var r0 *iam.GetTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.GetTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.GetTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithResponse provides a mock function with given fields: ctx, organizationId, userId, reqEditors
func (_m *ClientWithResponsesInterface) GetUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...iam.RequestEditorFn) (*iam.GetUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithResponse")
	}

	var r0 *iam.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.GetUserResponse, error)); ok {
		return rf(ctx, organizationId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.GetUserResponse); ok {
		r0 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiTokensWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListApiTokensWithResponse(ctx context.Context, organizationId string, params *iam.ListApiTokensParams, reqEditors ...iam.RequestEditorFn) (*iam.ListApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApiTokensWithResponse")
	}

	var r0 *iam.ListApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListApiTokensParams, ...iam.RequestEditorFn) (*iam.ListApiTokensResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListApiTokensParams, ...iam.RequestEditorFn) *iam.ListApiTokensResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *iam.ListApiTokensParams, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeamMembersWithResponse provides a mock function with given fields: ctx, organizationId, teamId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListTeamMembersWithResponse(ctx context.Context, organizationId string, teamId string, params *iam.ListTeamMembersParams, reqEditors ...iam.RequestEditorFn) (*iam.ListTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamMembersWithResponse")
	}

	var r0 *iam.ListTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *iam.ListTeamMembersParams, ...iam.RequestEditorFn) (*iam.ListTeamMembersResponse, error)); ok {
		return rf(ctx, organizationId, teamId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *iam.ListTeamMembersParams, ...iam.RequestEditorFn) *iam.ListTeamMembersResponse); ok {
		r0 = rf(ctx, organizationId, teamId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *iam.ListTeamMembersParams, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeamsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListTeamsWithResponse(ctx context.Context, organizationId string, params *iam.ListTeamsParams, reqEditors ...iam.RequestEditorFn) (*iam.ListTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamsWithResponse")
	}

	var r0 *iam.ListTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListTeamsParams, ...iam.RequestEditorFn) (*iam.ListTeamsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListTeamsParams, ...iam.RequestEditorFn) *iam.ListTeamsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *iam.ListTeamsParams, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListUsersWithResponse(ctx context.Context, organizationId string, params *iam.ListUsersParams, reqEditors ...iam.RequestEditorFn) (*iam.ListUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersWithResponse")
	}

	var r0 *iam.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListUsersParams, ...iam.RequestEditorFn) (*iam.ListUsersResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ListUsersParams, ...iam.RequestEditorFn) *iam.ListUsersResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *iam.ListUsersParams, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTeamMemberWithResponse provides a mock function with given fields: ctx, organizationId, teamId, memberId, reqEditors
func (_m *ClientWithResponsesInterface) RemoveTeamMemberWithResponse(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...iam.RequestEditorFn) (*iam.RemoveTeamMemberResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, memberId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamMemberWithResponse")
	}

	var r0 *iam.RemoveTeamMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...iam.RequestEditorFn) (*iam.RemoveTeamMemberResponse, error)); ok {
		return rf(ctx, organizationId, teamId, memberId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...iam.RequestEditorFn) *iam.RemoveTeamMemberResponse); ok {
		r0 = rf(ctx, organizationId, teamId, memberId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveTeamMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, memberId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateApiTokenWithResponse(ctx context.Context, organizationId string, tokenId string, reqEditors ...iam.RequestEditorFn) (*iam.RotateApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateApiTokenWithResponse")
	}

	var r0 *iam.RotateApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) (*iam.RotateApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...iam.RequestEditorFn) *iam.RotateApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RotateApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiTokenRolesWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateApiTokenRolesWithBodyWithResponse(ctx context.Context, organizationId string, tokenId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.UpdateApiTokenRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiTokenRolesWithBodyWithResponse")
	}

	var r0 *iam.UpdateApiTokenRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.UpdateApiTokenRolesResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.UpdateApiTokenRolesResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateApiTokenRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiTokenRolesWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateApiTokenRolesWithResponse(ctx context.Context, organizationId string, tokenId string, body iam.UpdateApiTokenRolesRequest, reqEditors ...iam.RequestEditorFn) (*iam.UpdateApiTokenRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiTokenRolesWithResponse")
	}

	var r0 *iam.UpdateApiTokenRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateApiTokenRolesRequest, ...iam.RequestEditorFn) (*iam.UpdateApiTokenRolesResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateApiTokenRolesRequest, ...iam.RequestEditorFn) *iam.UpdateApiTokenRolesResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateApiTokenRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.UpdateApiTokenRolesRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, tokenId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.UpdateApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiTokenWithBodyWithResponse")
	}

	var r0 *iam.UpdateApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.UpdateApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.UpdateApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, tokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateApiTokenWithResponse(ctx context.Context, organizationId string, tokenId string, body iam.UpdateApiTokenRequest, reqEditors ...iam.RequestEditorFn) (*iam.UpdateApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, tokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiTokenWithResponse")
	}

	var r0 *iam.UpdateApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateApiTokenRequest, ...iam.RequestEditorFn) (*iam.UpdateApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, tokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateApiTokenRequest, ...iam.RequestEditorFn) *iam.UpdateApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, tokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.UpdateApiTokenRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, tokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamRolesWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamRolesWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.UpdateTeamRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamRolesWithBodyWithResponse")
	}

	var r0 *iam.UpdateTeamRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.UpdateTeamRolesResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.UpdateTeamRolesResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateTeamRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamRolesWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamRolesWithResponse(ctx context.Context, organizationId string, teamId string, body iam.UpdateTeamRolesRequest, reqEditors ...iam.RequestEditorFn) (*iam.UpdateTeamRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamRolesWithResponse")
	}

	var r0 *iam.UpdateTeamRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateTeamRolesRequest, ...iam.RequestEditorFn) (*iam.UpdateTeamRolesResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateTeamRolesRequest, ...iam.RequestEditorFn) *iam.UpdateTeamRolesResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateTeamRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.UpdateTeamRolesRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamWithBodyWithResponse")
	}

	var r0 *iam.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.UpdateTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.UpdateTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithResponse(ctx context.Context, organizationId string, teamId string, body iam.UpdateTeamRequest, reqEditors ...iam.RequestEditorFn) (*iam.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamWithResponse")
	}

	var r0 *iam.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateTeamRequest, ...iam.RequestEditorFn) (*iam.UpdateTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateTeamRequest, ...iam.RequestEditorFn) *iam.UpdateTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.UpdateTeamRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRolesWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateUserRolesWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...iam.RequestEditorFn) (*iam.UpdateUserRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRolesWithBodyWithResponse")
	}

	var r0 *iam.UpdateUserRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) (*iam.UpdateUserRolesResponse, error)); ok {
		return rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) *iam.UpdateUserRolesResponse); ok {
		r0 = rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateUserRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRolesWithResponse provides a mock function with given fields: ctx, organizationId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateUserRolesWithResponse(ctx context.Context, organizationId string, userId string, body iam.UpdateUserRolesRequest, reqEditors ...iam.RequestEditorFn) (*iam.UpdateUserRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRolesWithResponse")
	}

	var r0 *iam.UpdateUserRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateUserRolesRequest, ...iam.RequestEditorFn) (*iam.UpdateUserRolesResponse, error)); ok {
		return rf(ctx, organizationId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, iam.UpdateUserRolesRequest, ...iam.RequestEditorFn) *iam.UpdateUserRolesResponse); ok {
		r0 = rf(ctx, organizationId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateUserRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, iam.UpdateUserRolesRequest, ...iam.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
