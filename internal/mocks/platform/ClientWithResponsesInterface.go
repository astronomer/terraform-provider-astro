// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks_platform

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	platform "github.com/astronomer/terraform-provider-astro/internal/clients/platform"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// CreateClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterWithBodyWithResponse")
	}

	var r0 *platform.CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.CreateClusterResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) *platform.CreateClusterResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterWithResponse(ctx context.Context, organizationId string, body platform.CreateClusterRequest, reqEditors ...platform.RequestEditorFn) (*platform.CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterWithResponse")
	}

	var r0 *platform.CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateClusterRequest, ...platform.RequestEditorFn) (*platform.CreateClusterResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateClusterRequest, ...platform.RequestEditorFn) *platform.CreateClusterResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, platform.CreateClusterRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentWithBodyWithResponse")
	}

	var r0 *platform.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) *platform.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithResponse(ctx context.Context, organizationId string, body platform.CreateDeploymentRequest, reqEditors ...platform.RequestEditorFn) (*platform.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentWithResponse")
	}

	var r0 *platform.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateDeploymentRequest, ...platform.RequestEditorFn) (*platform.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateDeploymentRequest, ...platform.RequestEditorFn) *platform.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, platform.CreateDeploymentRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceWithBodyWithResponse")
	}

	var r0 *platform.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) *platform.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithResponse(ctx context.Context, organizationId string, body platform.CreateWorkspaceRequest, reqEditors ...platform.RequestEditorFn) (*platform.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceWithResponse")
	}

	var r0 *platform.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateWorkspaceRequest, ...platform.RequestEditorFn) (*platform.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.CreateWorkspaceRequest, ...platform.RequestEditorFn) *platform.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, platform.CreateWorkspaceRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...platform.RequestEditorFn) (*platform.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterWithResponse")
	}

	var r0 *platform.DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.DeleteClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.DeleteClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentHibernationOverrideWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentHibernationOverrideWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...platform.RequestEditorFn) (*platform.DeleteDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploymentHibernationOverrideWithResponse")
	}

	var r0 *platform.DeleteDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.DeleteDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.DeleteDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.DeleteDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...platform.RequestEditorFn) (*platform.DeleteDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploymentWithResponse")
	}

	var r0 *platform.DeleteDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.DeleteDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.DeleteDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.DeleteDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...platform.RequestEditorFn) (*platform.DeleteWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceWithResponse")
	}

	var r0 *platform.DeleteWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.DeleteWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.DeleteWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.DeleteWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterOptionsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterOptionsWithResponse(ctx context.Context, organizationId string, params *platform.GetClusterOptionsParams, reqEditors ...platform.RequestEditorFn) (*platform.GetClusterOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterOptionsWithResponse")
	}

	var r0 *platform.GetClusterOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetClusterOptionsParams, ...platform.RequestEditorFn) (*platform.GetClusterOptionsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetClusterOptionsParams, ...platform.RequestEditorFn) *platform.GetClusterOptionsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetClusterOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.GetClusterOptionsParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...platform.RequestEditorFn) (*platform.GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterWithResponse")
	}

	var r0 *platform.GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.GetClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.GetClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentOptionsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentOptionsWithResponse(ctx context.Context, organizationId string, params *platform.GetDeploymentOptionsParams, reqEditors ...platform.RequestEditorFn) (*platform.GetDeploymentOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentOptionsWithResponse")
	}

	var r0 *platform.GetDeploymentOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetDeploymentOptionsParams, ...platform.RequestEditorFn) (*platform.GetDeploymentOptionsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetDeploymentOptionsParams, ...platform.RequestEditorFn) *platform.GetDeploymentOptionsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetDeploymentOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.GetDeploymentOptionsParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...platform.RequestEditorFn) (*platform.GetDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentWithResponse")
	}

	var r0 *platform.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.GetDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.GetDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationWithResponse(ctx context.Context, organizationId string, params *platform.GetOrganizationParams, reqEditors ...platform.RequestEditorFn) (*platform.GetOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationWithResponse")
	}

	var r0 *platform.GetOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetOrganizationParams, ...platform.RequestEditorFn) (*platform.GetOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.GetOrganizationParams, ...platform.RequestEditorFn) *platform.GetOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.GetOrganizationParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...platform.RequestEditorFn) (*platform.GetWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceWithResponse")
	}

	var r0 *platform.GetWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) (*platform.GetWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...platform.RequestEditorFn) *platform.GetWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.GetWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, organizationId string, params *platform.ListClustersParams, reqEditors ...platform.RequestEditorFn) (*platform.ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersWithResponse")
	}

	var r0 *platform.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListClustersParams, ...platform.RequestEditorFn) (*platform.ListClustersResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListClustersParams, ...platform.RequestEditorFn) *platform.ListClustersResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.ListClustersParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentsWithResponse(ctx context.Context, organizationId string, params *platform.ListDeploymentsParams, reqEditors ...platform.RequestEditorFn) (*platform.ListDeploymentsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsWithResponse")
	}

	var r0 *platform.ListDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListDeploymentsParams, ...platform.RequestEditorFn) (*platform.ListDeploymentsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListDeploymentsParams, ...platform.RequestEditorFn) *platform.ListDeploymentsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.ListDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.ListDeploymentsParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationsWithResponse(ctx context.Context, params *platform.ListOrganizationsParams, reqEditors ...platform.RequestEditorFn) (*platform.ListOrganizationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationsWithResponse")
	}

	var r0 *platform.ListOrganizationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *platform.ListOrganizationsParams, ...platform.RequestEditorFn) (*platform.ListOrganizationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *platform.ListOrganizationsParams, ...platform.RequestEditorFn) *platform.ListOrganizationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.ListOrganizationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *platform.ListOrganizationsParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspacesWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspacesWithResponse(ctx context.Context, organizationId string, params *platform.ListWorkspacesParams, reqEditors ...platform.RequestEditorFn) (*platform.ListWorkspacesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspacesWithResponse")
	}

	var r0 *platform.ListWorkspacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListWorkspacesParams, ...platform.RequestEditorFn) (*platform.ListWorkspacesResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *platform.ListWorkspacesParams, ...platform.RequestEditorFn) *platform.ListWorkspacesResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.ListWorkspacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *platform.ListWorkspacesParams, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterWithBodyWithResponse")
	}

	var r0 *platform.UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.UpdateClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) *platform.UpdateClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body platform.UpdateClusterRequest, reqEditors ...platform.RequestEditorFn) (*platform.UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterWithResponse")
	}

	var r0 *platform.UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateClusterRequest, ...platform.RequestEditorFn) (*platform.UpdateClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateClusterRequest, ...platform.RequestEditorFn) *platform.UpdateClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, platform.UpdateClusterRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentHibernationOverrideWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentHibernationOverrideWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.UpdateDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentHibernationOverrideWithBodyWithResponse")
	}

	var r0 *platform.UpdateDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.UpdateDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) *platform.UpdateDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentHibernationOverrideWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentHibernationOverrideWithResponse(ctx context.Context, organizationId string, deploymentId string, body platform.OverrideDeploymentHibernationBody, reqEditors ...platform.RequestEditorFn) (*platform.UpdateDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentHibernationOverrideWithResponse")
	}

	var r0 *platform.UpdateDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.OverrideDeploymentHibernationBody, ...platform.RequestEditorFn) (*platform.UpdateDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.OverrideDeploymentHibernationBody, ...platform.RequestEditorFn) *platform.UpdateDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, platform.OverrideDeploymentHibernationBody, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentWithBodyWithResponse")
	}

	var r0 *platform.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) *platform.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, body platform.UpdateDeploymentRequest, reqEditors ...platform.RequestEditorFn) (*platform.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentWithResponse")
	}

	var r0 *platform.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateDeploymentRequest, ...platform.RequestEditorFn) (*platform.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateDeploymentRequest, ...platform.RequestEditorFn) *platform.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, platform.UpdateDeploymentRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationWithBodyWithResponse")
	}

	var r0 *platform.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) *platform.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithResponse(ctx context.Context, organizationId string, body platform.UpdateOrganizationRequest, reqEditors ...platform.RequestEditorFn) (*platform.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationWithResponse")
	}

	var r0 *platform.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.UpdateOrganizationRequest, ...platform.RequestEditorFn) (*platform.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, platform.UpdateOrganizationRequest, ...platform.RequestEditorFn) *platform.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, platform.UpdateOrganizationRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...platform.RequestEditorFn) (*platform.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceWithBodyWithResponse")
	}

	var r0 *platform.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) (*platform.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) *platform.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, body platform.UpdateWorkspaceRequest, reqEditors ...platform.RequestEditorFn) (*platform.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceWithResponse")
	}

	var r0 *platform.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateWorkspaceRequest, ...platform.RequestEditorFn) (*platform.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, platform.UpdateWorkspaceRequest, ...platform.RequestEditorFn) *platform.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, platform.UpdateWorkspaceRequest, ...platform.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
